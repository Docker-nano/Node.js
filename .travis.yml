notifications:
  email: false

language: generic

env: ROOTFS="$TRAVIS_BUILD_DIR/product/rootfs.tar.xz" PRODUCT=product

before_script:
  - |
    keep-alive() {
      while true; do
        sleep 60
        echo Building...
      done &
    }

script:
  - ./nano build image
  - keep-alive
  - ./nano build rootfs 2>~/error.log > >(tee ~/build.log | grep '^\S*>>>\s')
  - kill $! # keep-alive
  - ./nano pull rootfs

  # Test rootfs readable.
  - '[[ -r $ROOTFS ]]'

  # Test rootfs begins with root entry.
  - '[[ $(tar tf "$ROOTFS" | head -1) = ./ ]]'

  # Test rootfs contains node and npm binaries.
  - (( $(tar tf "$ROOTFS" | grep -Fxce ./usr/bin/node -e ./usr/bin/npm) == 2 ))

  # Import product image.
  - docker build -t "$PRODUCT" product

  # Test Node.
  - docker run --rm "$PRODUCT" node -v
  - '[[ $(docker run --rm "$PRODUCT" node -e ''console.log("foo")'') = foo ]]'

  # Test NPM.
  - docker run --rm "$PRODUCT" npm -v

after_failure:
  - tail -30 ~/error.log
  - tail -30 ~/build.log

after_success:
  # Work in new directory.
  - mkdir -v newproduct && cd $_

  # Initialize and configure Git.
  - |
    git init
    git config user.name Travis
    git config user.email bilge+travis@scriptfusion.com
    git config credential.helper store
    git remote add origin https://github.com/"$TRAVIS_REPO_SLUG"
    echo "$GIT_CREDENTIALS" > ~/.git-credentials

  # Pull the most recent commit.
  - git pull --depth=1 origin "${branch=product/"$TRAVIS_BRANCH"}"

  # Copy rootfs and product skeleton.
  - cp -fl ../product/* .

  # Push modified product files.
  - git add .;
    git commit -m "Built product from $TRAVIS_COMMIT." && git push origin HEAD:"$branch"
